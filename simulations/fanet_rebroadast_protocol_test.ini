# Date: 30/08/2023
# Modified FANET_Dataset_with_Video.ini to use pcap CSV files as a way of passing in packet size and sending interval from pcap files
[General]

[Config Fixed_Prob]
description = To generate FANET dataset with traffic from PCAP CSV
network = fanet_adhoc_hosts_pcap
#record-eventlog = true

# --------------------- TRAINING DATASET ----------------------------------
*.uavSpeed = ${USP=12} # The UAV speed 
*.numPacketsRecord = ${NPR=10000} # Number of packets to record for uplink and downlink
*.numHosts = ${N=7}
*.hdistRange = ${HDR=1200} # The range of horizontal distance to travel, in m
*.gcsX = ${GX=500} # X coord of GCS, in m
*.gcsY = ${GY=500} # Y coord of GCS, in m
*.swarmHeight = ${Z=270}
*.uavRadius = ${R=5}
*.modulation = ${MCS="QPSK"} #"QAM-64", "QAM-16", "QPSK", "BPSK"
*.MCSBitrate = ${BR=13} # 52, 26, 13, 6.5
.dlPcapCsvFilePath = ${DLPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_dl.csv"} 
.ulPcapCsvFilePath = ${ULPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_ul.csv"} 
.vidPcapCsvFilePath = ${VIDPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_vid.csv"} 
*.uavSendingInterval = ${EUSI=1000} # Just set this to the closest Estimated UAV Sending Interval
*.gcsSendingInterval = ${EGSI=1000} # Just set this to the closest Estimated GCS Sending Interval
.counterThreshold = ${CT=3} # Counter threshold to limit rebroadcastings
.broadcastProb = ${BP=0.5} # Broadcast probability for fixed case
.csvFilePath = ${CSV="/media/research-student/One Touch/FANET Datasets/DJISpark_ReBroadcast_Protocols_No_Interference/fixedProb-" + string(${BP}) + "_CT-" + string(${CT}) + "/" + \
               "UAVSpeed-" + string(${USP}) + "_BitRate-" + string(${BR}) + "_Height-" + string(${Z}) + "_Distance-" + string(${HDR}) + \
               "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string(${EUSI}) + "_CounterThreshold-" + string(${CT})}
#.pcapFilePath = ${PCAP="/home/research-student/omnetpp_sim_results/PCAP_Test/GW.pcap"} 

# -------------- For micro-sim ---------------------
sim-time-limit = ${HDR}s / ${USP} # For measured throughput dataset, determine sim time based on UAV speed and distance to travel
seed-set = ${SEED=0..9} 
# To avoid file name too long issue
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"  # use just the run number in the file name
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"  # use just the run number in the file name
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog" # use just the run number in the file name
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna" # use just the run number in the file name

# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "LinearMobility"
*.gatewayNode.mobility.initialY = ${GY}m
*.gatewayNode.mobility.initialX = ${GX}m
*.gatewayNode.mobility.initialZ = ${Z}m
*.gatewayNode.mobility.constraintAreaMinX = ${GX}m
*.gatewayNode.mobility.constraintAreaMaxX = ${HDR}m + ${GX}m
*.gatewayNode.mobility.speed = ${USP}mps
*.gatewayNode.mobility.initialMovementHeading = 0deg
*.gatewayNode.mobility.initFromDisplayString = false

# UAV member(s) mobility
*.adhocNode[*].mobility.typename = "AttachedMobility"
*.adhocNode[*].mobility.mobilityModule = "^.^.gatewayNode.mobility"
*.adhocNode[*].mobility.offsetX = ${R}m * cos(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetY = ${R}m * sin(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetZ = 0m
*.adhocNode[*].mobility.initFromDisplayString = false

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = ${GXGCS=500}m
**.GCS.mobility.initialY = ${GY}m
**.GCS.mobility.initialZ = 0m
**.GCS.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = -100m
**.constraintAreaMinY = -100m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 2200m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 500m

#**.initFromDisplayString = false

# ---------------- Network Layer --------------------#
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.GCS.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
# ---------------- Setting up routes and IP ------------------ #
*.configurator.config = xmldoc("fanet_multicast_config.xml")
*.configurator.addStaticRoutes = false
*.configurator.dumpConfig = "routes_dump.xml"
*.configurator.dumpRoutes = true

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
**.wlan[*].bitrate = ${BR}Mbps
**.wlan[*].radio.transmitter.modulation = ${MCS} #"QAM-64", "QAM-16", "QPSK", "BPSK"

# Channel modelling 
#**.wlan[0].radio.transmitter.power = 100mW 
*.GCS.wlan[0].radio.transmitter.power = 100mW # 20 dBm
*.gatewayNode.wlan[0].radio.transmitter.power = 100mW # 20 dBm
*.adhocNode[*].wlan[0].radio.transmitter.power = 100mW  # 20 dBm
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm # -107dBm, -86dBm
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 2.75
**.pathLoss.sigma_a = 11.1852
**.pathLoss.sigma_b = 0.06
**.pathLoss.K_min = 1.4922 # (In dB) For suburban in 2.4GHz
**.pathLoss.K_max = 12.2272  # (In dB) For suburban in 2.4GHz
**.propagation.typename = "ConstantSpeedPropagation"

# Set fragmentation threshold to allow no-fragmentation of video packets
**.mac.dcf.originatorMacDataService.fragmentationPolicy.fragmentationThreshold = 1574B

# Allow multicast forwarding
**.multicastForwarding = true

# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.numApps = 2
*.GCS.app[0].typename = "UdpGCSCsvApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "225.0.0.1" 
*.GCS.app[0].numMemberUAVs = -1
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].seed = ${SEED} + ${N} + 1 # For shuffling PCAP data
*.GCS.app[0].timeToLive = 255
*.GCS.app[0].joinLocalMulticastGroups = true
*.GCS.app[1].typename = "UdpSinkRecordCsv"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = true

# Gateway
*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.gatewayNode.numApps = 2 # 2
*.gatewayNode.app[0].typename = "UdpFixedProbabilityRebroadcastApp"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].destPort = 5000
*.gatewayNode.app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.gatewayNode.app[0].broadcastAddress = "225.0.0.1"
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[0].joinLocalMulticastGroups = true
*.gatewayNode.app[0].multicastInterface = "wlan0"
*.gatewayNode.app[0].startTime = 0s # IMPORTANT, else it won't start
*.gatewayNode.app[0].timeToLive = 255
*.gatewayNode.app[0].waitInterval = uniform(150ms, 250ms)
*.gatewayNode.app[0].counterThreshold = ${CT}
*.gatewayNode.app[0].broadcastProbability = ${BP}
*.gatewayNode.app[0].seed = ${SEED} # For srand func
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} + ${N} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true

# UAVs
*.adhocNode[*].ipv4.ip.directBroadcastInterfaces = "wlan0"
*.adhocNode[*].numApps = 2 # 2
*.adhocNode[*].app[0].typename = "UdpFixedProbabilityRebroadcastApp"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].destPort = 5000
*.adhocNode[*].app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.adhocNode[*].app[0].broadcastAddress = "225.0.0.1" 
*.adhocNode[*].app[0].counterThreshold = ${CT}
*.adhocNode[*].app[0].broadcastProbability = ${BP}
*.adhocNode[*].app[0].seed = ${SEED} + parentIndex() # For srand func
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[0].joinLocalMulticastGroups = true
*.adhocNode[*].app[0].multicastInterface = "wlan0"
*.adhocNode[*].app[0].startTime = 0s # IMPORTANT, else it won't start
*.adhocNode[*].app[0].timeToLive = 255
*.adhocNode[*].app[0].waitInterval = uniform(150ms, 250ms)
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} + parentIndex() # For shuffling PCAP data

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV}
*.gatewayNode.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_GW-Broadcast.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV}
*.adhocNode[*].app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Broadcast.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

# ----------- Setting up Visualization ---------- #
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.mobilityVisualizer[*].displayVelocities = false
*.visualizer.mobilityVisualizer[*].displayMovementTrails = false
*.visualizer.interfaceTableVisualizer[*].displayInterfaceTables = true
*.visualizer.physicalLinkVisualizer[*].displayLinks = true
*.visualizer.physicalLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"

#*.GCS.wlan[0].radio.displayCommunicationRange = true
#*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
#*.adhocNode*.wlan[0].radio.displayInterferenceRange = true
**.wlan[0].radio.displayCommunicationRange = true
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
#*.visualizer.*.routingTableVisualizer[*].displayRoutingTables = true
#*.visualizer.*.routingTableVisualizer[*].destinationFilter = "*"

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Config Dynamic_Prob]
extends = Fixed_Prob
*.uavSpeed = ${USP2=12} # The UAV speed 
.csvFilePath2 = ${CSV2="/media/research-student/One Touch/FANET Datasets/DJISpark_ReBroadcast_Protocols_No_Interference/dynamic_prob_CT-3/" + \
               "UAVSpeed-" + string($USP) + "_BitRate-" + string($BR) + "_Height-" + string($Z) + "_Distance-" + string($HDR) + \
               "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string($EUSI) + "_CounterThreshold-" + string($CT)}
# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.numApps = 2
*.GCS.app[0].typename = "UdpGCSCsvApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "225.0.0.1" 
*.GCS.app[0].numMemberUAVs = -1
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].seed = ${SEED} + ${N} + 1 # For shuffling PCAP data
*.GCS.app[0].timeToLive = 255
*.GCS.app[0].joinLocalMulticastGroups = true
*.GCS.app[1].typename = "UdpSinkRecordCsv"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = true

# Gateway
*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.gatewayNode.numApps = 2 # 2
*.gatewayNode.app[0].typename = "UdpDynamicProbabilityRebroadcastApp"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].destPort = 5000
*.gatewayNode.app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.gatewayNode.app[0].broadcastAddress = "225.0.0.1"
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[0].joinLocalMulticastGroups = true
*.gatewayNode.app[0].multicastInterface = "wlan0"
*.gatewayNode.app[0].startTime = 0s # IMPORTANT, else it won't start
*.gatewayNode.app[0].timeToLive = 255
*.gatewayNode.app[0].seed = ${SEED} # For srand func
*.gatewayNode.app[0].waitInterval = uniform(150ms, 250ms)
*.gatewayNode.app[0].counterThreshold = ${CT}
*.gatewayNode.app[0].simulationArea = 1200000
*.gatewayNode.app[0].transmissionRange = 500 # In m
*.gatewayNode.app[0].numNode = ${N} + 1
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} + ${N} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true

# UAVs
*.adhocNode[*].ipv4.ip.directBroadcastInterfaces = "wlan0"
*.adhocNode[*].numApps = 2 # 2
*.adhocNode[*].app[0].typename = "UdpDynamicProbabilityRebroadcastApp"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].destPort = 5000
*.adhocNode[*].app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.adhocNode[*].app[0].broadcastAddress = "225.0.0.1" 
*.adhocNode[*].app[0].counterThreshold = ${CT}
*.adhocNode[*].app[0].seed = ${SEED} + parentIndex() # For srand func
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[0].joinLocalMulticastGroups = true
*.adhocNode[*].app[0].multicastInterface = "wlan0"
*.adhocNode[*].app[0].startTime = 0s # IMPORTANT, else it won't start
*.adhocNode[*].app[0].timeToLive = 255
*.adhocNode[*].app[0].waitInterval = uniform(150ms, 250ms)
*.adhocNode[*].app[0].simulationArea = 1200000
*.adhocNode[*].app[0].transmissionRange = 500 # In m
*.adhocNode[*].app[0].numNode = ${N} + 1
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} + parentIndex() # For shuffling PCAP data

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV2}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV2}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV2}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV2}
*.gatewayNode.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_GW-Broadcast.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV2}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV2}
*.adhocNode[*].app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Broadcast.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Config DV_Cast_Prob]
extends = Fixed_Prob
.csvFilePath3 = ${CSV3="/media/research-student/One Touch/FANET Datasets/DJISpark_ReBroadcast_Protocols_No_Interference/dvcast_prob_CT-3/" + \
               "UAVSpeed-" + string($USP) + "_BitRate-" + string($BR) + "_Height-" + string($Z) + "_Distance-" + string($HDR) + \
               "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string($EUSI) + "_CounterThreshold-" + string($CT)}
# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.numApps = 2
*.GCS.app[0].typename = "UdpGCSCsvApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "225.0.0.1" 
*.GCS.app[0].numMemberUAVs = -1
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].seed = ${SEED} + ${N} + 1 # For shuffling PCAP data
*.GCS.app[0].timeToLive = 255
*.GCS.app[0].joinLocalMulticastGroups = true
*.GCS.app[1].typename = "UdpSinkRecordCsv"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = true

# Gateway
*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.gatewayNode.numApps = 2 # 2
*.gatewayNode.app[0].typename = "UdpDVCastRebroadcastApp"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].destPort = 5000
*.gatewayNode.app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.gatewayNode.app[0].broadcastAddress = "225.0.0.1"
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[0].joinLocalMulticastGroups = true
*.gatewayNode.app[0].multicastInterface = "wlan0"
*.gatewayNode.app[0].startTime = 0s # IMPORTANT, else it won't start
*.gatewayNode.app[0].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[0].timeToLive = 255
*.gatewayNode.app[0].seed = ${SEED} # For srand func
*.gatewayNode.app[0].waitInterval = uniform(150ms, 250ms)
*.gatewayNode.app[0].counterThreshold = ${CT}
*.gatewayNode.app[0].transmissionRange = 500 # In m
*.gatewayNode.app[0].uavSpeed = ${USP}
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} + ${N} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true

# UAVs
*.adhocNode[*].ipv4.ip.directBroadcastInterfaces = "wlan0"
*.adhocNode[*].numApps = 2 # 2
*.adhocNode[*].app[0].typename = "UdpDVCastRebroadcastApp"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].destPort = 5000
*.adhocNode[*].app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.adhocNode[*].app[0].broadcastAddress = "225.0.0.1" 
*.adhocNode[*].app[0].counterThreshold = ${CT}
*.adhocNode[*].app[0].seed = ${SEED} + parentIndex() # For srand func
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[0].joinLocalMulticastGroups = true
*.adhocNode[*].app[0].multicastInterface = "wlan0"
*.adhocNode[*].app[0].startTime = 0s # IMPORTANT, else it won't start
*.adhocNode[*].app[0].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[0].timeToLive = 255
*.adhocNode[*].app[0].waitInterval = uniform(150ms, 250ms)
*.adhocNode[*].app[0].transmissionRange = 500 # In m
*.adhocNode[*].app[0].uavSpeed = ${USP}
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} + parentIndex() # For shuffling PCAP data

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV3}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV3}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV3}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV3}
*.gatewayNode.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_GW-Broadcast.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV3}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV3}
*.adhocNode[*].app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Broadcast.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Config Throughput_Based_Prob_no_GCS] # The GCS will NOT rebroadcast
extends = Fixed_Prob
*.broadcastVersion = ${VER=1}
.csvFilePath4 = ${CSV4="/media/research-student/One Touch/FANET Datasets/DJISpark_ReBroadcast_Protocols_No_Interference/throughput_based_CT-3_version-" + string($VER) + "/" + \
               "UAVSpeed-" + string($USP) + "_BitRate-" + string($BR) + "_Height-" + string($Z) + "_Distance-" + string($HDR) + \
               "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string($EUSI) + "_CounterThreshold-" + string($CT)}

#allow-object-stealing-on-deletion=true
# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.numApps = 2
# +++++++++++++++++++ Tx App +++++++++++++++++++
*.GCS.app[0].typename = "UdpGCSCsvApp"
# ---------------- Network specific params ----------------------
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "225.0.0.1" 
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].timeToLive = 255
*.GCS.app[0].joinLocalMulticastGroups = true
*.GCS.app[0].seed = ${SEED} + ${N} + 1 # For shuffling PCAP data
# ---------------- Tx App Params params ----------------------
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].numMemberUAVs = -1
# +++++++++++++++++++ Rx App +++++++++++++++++++
*.GCS.app[1].typename = "UdpSinkRecordCsv"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = true

# Gateway
*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.gatewayNode.numApps = 2 # 2
*.gatewayNode.app[0].typename = "UdpThroughputBasedBroadcastApp"
# ---------------- Network specific params ----------------------
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].destPort = 5000
*.gatewayNode.app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.gatewayNode.app[0].broadcastAddress = "225.0.0.1"
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[0].joinLocalMulticastGroups = true
*.gatewayNode.app[0].multicastInterface = "wlan0"
*.gatewayNode.app[0].startTime = 0s # IMPORTANT, else it won't start
*.gatewayNode.app[0].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[0].timeToLive = 255
# ---------------- Broadcast specific params ----------------------
*.gatewayNode.app[0].seed = ${SEED} # For srand func
*.gatewayNode.app[0].waitInterval = uniform(150ms, 250ms)
*.gatewayNode.app[0].counterThreshold = ${CT}
*.gatewayNode.app[0].remainingTimeThreshold = 100ms # Double value, in seconds
*.gatewayNode.app[0].throughputTimeWindow = 5s # Seconds / mSecs
*.gatewayNode.app[0].throughputMeasureInterval = 1s # Seconds / mSecs
*.gatewayNode.app[0].throughputBaseline = 28.94 # In bytes per sec (don't give unit in .ned file)
*.gatewayNode.app[0].movingAverageSize = 3
*.gatewayNode.app[0].version = ${VER}
# =+++++++++++++++ Sending App =++++++++++++++++++++++++++++++++++=
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} + ${N} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true

# UAVs
*.adhocNode[*].ipv4.ip.directBroadcastInterfaces = "wlan0"
*.adhocNode[*].numApps = 2 # 2
*.adhocNode[*].app[0].typename = "UdpThroughputBasedBroadcastApp"
# ---------------- Network specific params ----------------------
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].destPort = 5000
*.adhocNode[*].app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.adhocNode[*].app[0].broadcastAddress = "225.0.0.1" 
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[0].joinLocalMulticastGroups = true
*.adhocNode[*].app[0].multicastInterface = "wlan0"
*.adhocNode[*].app[0].startTime = 0s # IMPORTANT, else it won't start
*.adhocNode[*].app[0].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[0].timeToLive = 255
# ---------------- Broadcast specific params ----------------------
*.adhocNode[*].app[0].counterThreshold = ${CT}
*.adhocNode[*].app[0].seed = ${SEED} + parentIndex() # For srand func
*.adhocNode[*].app[0].waitInterval = uniform(150ms, 250ms)
*.adhocNode[*].app[0].remainingTimeThreshold = 100ms # Double value, in seconds
*.adhocNode[*].app[0].throughputTimeWindow = 5s # Seconds / mSecs
*.adhocNode[*].app[0].throughputMeasureInterval = 1s # Seconds / mSecs
*.adhocNode[*].app[0].throughputBaseline = 28.94 # In bytes per sec (don't give unit in .ned file)
*.adhocNode[*].app[0].movingAverageSize = 3
*.adhocNode[*].app[0].version = ${VER}
# =+++++++++++++++ Sending App =++++++++++++++++++++++++++++++++++=
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} + parentIndex() # For shuffling PCAP data

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV4}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV4}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV4}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV4}
*.gatewayNode.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_GW-Broadcast.csv"
*.gatewayNode.app[0].csvFileNameThroughput = "Run-" + string(${SEED}) + "_GW-Throughput.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV4}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV4}
*.adhocNode[*].app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Broadcast.csv"
*.adhocNode[*].app[0].csvFileNameThroughput = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Throughput.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"


###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[Config Throughput_Based_Prob_with_GCS] # The GCS will also rebroadcast
extends = Fixed_Prob
*.broadcastVersion = ${VER=3}
*.gcsBroadcastVersion = ${GVER=2}
.csvFilePath5 = ${CSV5="/media/research-student/One Touch/FANET Datasets/DJISpark_ReBroadcast_Protocols_No_Interference/throughput_based_with_GCS_CT-3_version-" + string($VER) + "/" + \
               "UAVSpeed-" + string($USP) + "_BitRate-" + string($BR) + "_Height-" + string($Z) + "_Distance-" + string($HDR) + \
               "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string($EUSI) + "_CounterThreshold-" + string($CT)}

#allow-object-stealing-on-deletion=true
# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.numApps = 1
*.GCS.app[0].typename = "UdpGCSCsvRebroadcastingApp"
# ---------------- Network specific params ----------------------
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "225.0.0.1" 
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].timeToLive = 255
*.GCS.app[0].joinLocalMulticastGroups = true
*.GCS.app[0].seed = ${SEED} + ${N} + 1 # For shuffling PCAP data and srand() func
# ---------------- Tx App Params params ----------------------
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].numMemberUAVs = -1
# ---------------- Broadcast specific params ----------------------
*.GCS.app[0].waitInterval = uniform(150ms, 250ms)
*.GCS.app[0].remainingTimeThreshold = 100ms # Double value, in seconds
*.GCS.app[0].latencyConstraint = 1s # Double value, in seconds
*.GCS.app[0].throughputBaseline = 4593.15 # In bytes per sec (don't give unit in .ned file)
*.GCS.app[0].version = ${GVER}
# ---------------- Throughput monitoring specific params ----------------------
*.GCS.app[0].throughputTimeWindow = 1s # Seconds / mSecs
*.GCS.app[0].throughputMeasureInterval = 0.1s # Seconds / mSecs
*.GCS.app[0].movingAverageSize = 3
#*.GCS.app[1].typename = "UdpSinkRecordCsv"
#*.GCS.app[1].localPort = 5001
#*.GCS.app[1].receiveBroadcast = true

# Gateway
*.gatewayNode.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.gatewayNode.numApps = 2 # 2
*.gatewayNode.app[0].typename = "UdpThroughputBasedBroadcastApp"
# ---------------- Network specific params ----------------------
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].destPort = 5000
*.gatewayNode.app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.gatewayNode.app[0].broadcastAddress = "225.0.0.1"
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[0].joinLocalMulticastGroups = true
*.gatewayNode.app[0].multicastInterface = "wlan0"
*.gatewayNode.app[0].startTime = 0s # IMPORTANT, else it won't start
*.gatewayNode.app[0].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[0].timeToLive = 255
# ---------------- Broadcast specific params ----------------------
*.gatewayNode.app[0].seed = ${SEED} # For srand func
*.gatewayNode.app[0].waitInterval = uniform(150ms, 250ms)
*.gatewayNode.app[0].counterThreshold = ${CT}
*.gatewayNode.app[0].remainingTimeThreshold = 100ms # Double value, in seconds
*.gatewayNode.app[0].throughputTimeWindow = 5s # Seconds / mSecs
*.gatewayNode.app[0].throughputMeasureInterval = 1s # Seconds / mSecs
*.gatewayNode.app[0].throughputBaseline = 28.94 # In bytes per sec (don't give unit in .ned file)
*.gatewayNode.app[0].movingAverageSize = 3
*.gatewayNode.app[0].version = ${VER}
# =+++++++++++++++ Sending App =++++++++++++++++++++++++++++++++++=
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5000
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} + ${N} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true

# UAVs
*.adhocNode[*].ipv4.ip.directBroadcastInterfaces = "wlan0"
*.adhocNode[*].numApps = 2 # 2
*.adhocNode[*].app[0].typename = "UdpThroughputBasedBroadcastApp"
# ---------------- Network specific params ----------------------
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].destPort = 5000
*.adhocNode[*].app[0].packetName = "CNCData" # Name of broadcast packet to receive
*.adhocNode[*].app[0].broadcastAddress = "225.0.0.1" 
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[0].joinLocalMulticastGroups = true
*.adhocNode[*].app[0].multicastInterface = "wlan0"
*.adhocNode[*].app[0].startTime = 0s # IMPORTANT, else it won't start
*.adhocNode[*].app[0].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[0].timeToLive = 255
# ---------------- Broadcast specific params ----------------------
*.adhocNode[*].app[0].counterThreshold = ${CT}
*.adhocNode[*].app[0].seed = ${SEED} + parentIndex() # For srand func
*.adhocNode[*].app[0].waitInterval = uniform(150ms, 250ms)
*.adhocNode[*].app[0].remainingTimeThreshold = 100ms # Double value, in seconds
*.adhocNode[*].app[0].throughputTimeWindow = 5s # Seconds / mSecs
*.adhocNode[*].app[0].throughputMeasureInterval = 1s # Seconds / mSecs
*.adhocNode[*].app[0].throughputBaseline = 28.94 # In bytes per sec (don't give unit in .ned file)
*.adhocNode[*].app[0].movingAverageSize = 3
*.adhocNode[*].app[0].version = ${VER}
# =+++++++++++++++ Sending App =++++++++++++++++++++++++++++++++++=
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5000
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} + parentIndex() # For shuffling PCAP data

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV5}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV5}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_GCS-Broadcast.csv"
*.GCS.app[0].csvFileNameThroughput = "Run-" + string(${SEED}) + "_GCS-Throughput.csv"
# *.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV5}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV5}
*.gatewayNode.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_GW-Broadcast.csv"
*.gatewayNode.app[0].csvFileNameThroughput = "Run-" + string(${SEED}) + "_GW-Throughput.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV5}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV5}
*.adhocNode[*].app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[0].csvFileNameBroadcast = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Broadcast.csv"
*.adhocNode[*].app[0].csvFileNameThroughput = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Throughput.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"


