# Date: 17/11/2023
# Desc: To simulate MANET as potential interference scenario
[General]

[Config PCAP_Traffic]
description = To generate FANET measured throughput dataset with traffic from PCAP CSV, under MANET interference scenario
network = fanet_adhoc_hosts_pcap_wt_manet_interference

# --------------------- TRAINING DATASET ----------------------------------
*.uavSpeed = ${USP=6} # The UAV speed
*.numPackets = ${NP=10000} # Number of packets to target. This will determine the number of runs needed
*.numPacketsRecord = ${NPR=-1} # NPR set to -1 to indicate record all packets sent
*.numHosts = ${N=7}
*.numManetHosts = ${M=25}
*.hdistRange = ${HDR=1200} # The range of horizontal distance to travel, in m
*.gcsX = ${GX=400} # X coord of GCS, in m
*.gcsY = ${GY=1000} # Y coord of GCS, in m
*.swarmHeight = ${Z=225}
*.uavRadius = ${R=5}
*.modulation = ${MCS="QPSK"} #"QAM-64", "QAM-16", "QPSK", "BPSK"
*.MCSBitrate = ${BR=13 ! MCS} # 52, 26, 13, 6.5
*.uavSendingInterval = ${EUSI=100} # Just set this to the closest Estimated UAV Sending Interval
*.gcsSendingInterval = ${EGSI=20} 
*.videoBitRate = ${VBR=2} # In Mbps
*.videoPacketSize = ${VPS=1450} # In bytes (with header of 64 bytes)
*.videoSendingInterval = ${VSI=($VPS) * 8 * 0.001 / ($VBR)} # In ms
.csvFilePath = ${CSV="/media/research-student/One Touch/FANET Datasets/DJISpark_MANET_Interference/data/UAVSpeed-" + string(${USP}) + "_BitRate-" + string(${BR}) + "_Height-" + string(${Z}) + "_Distance-" + string(${HDR}) + "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string(${EUSI}) + "_MANETNumNode-" + string(${M})}
.dlPcapCsvFilePath = ${DLPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_dl.csv"} 
.ulPcapCsvFilePath = ${ULPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_ul.csv"} 
.vidPcapCsvFilePath = ${VIDPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_vid.csv"} 

sim-time-limit = ${HDR}s / ${USP} # For micro-sim, determine the sim time from number of packets and sending rate (plus 10 is extra buffer)
seed-set = ${SEED=1..ceil($NP / ((($HDR/$USP)-1)*10))} # Based on minimum send interval of UAVs # Number of runs needed to hit NP packets

# To avoid file name too long issue
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"  # use just the run number in the file name
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"  # use just the run number in the file name
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog" # use just the run number in the file name
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna" # use just the run number in the file name

# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "LinearMobility"
*.gatewayNode.mobility.initialY = ${GY}m
*.gatewayNode.mobility.initialX = ${GX}m
*.gatewayNode.mobility.initialZ = ${Z}m
*.gatewayNode.mobility.constraintAreaMinX = ${GX}m
*.gatewayNode.mobility.constraintAreaMaxX = ${HDR}m + ${GX}m
*.gatewayNode.mobility.speed = ${USP}mps
*.gatewayNode.mobility.initialMovementHeading = 0deg
*.gatewayNode.mobility.initFromDisplayString = false

# UAV member(s) mobility
*.adhocNode[*].mobility.typename = "AttachedMobility"
*.adhocNode[*].mobility.mobilityModule = "^.^.gatewayNode.mobility"
*.adhocNode[*].mobility.offsetX = ${R}m * cos(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetY = ${R}m * sin(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetZ = 0m
*.adhocNode[*].mobility.initFromDisplayString = false

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = ${GX}m
**.GCS.mobility.initialY = ${GY}m
**.GCS.mobility.initialZ = 0m
**.GCS.mobility.initFromDisplayString = false

# Manet GW-node mobility
*.mGatewayNode.mobility.typename = "StationaryMobility"
*.mGatewayNode.mobility.initialX = 1000m
*.mGatewayNode.mobility.initialY = 1000m
*.mGatewayNode.mobility.initialZ = 0m
*.mGatewayNode.mobility.initFromDisplayString = false

# MANET Ad-Hoc Nodes mobility
*.mAdhocNode[*].mobility.typename = "RandomWaypointMobility"
*.mAdhocNode[*].mobility.speed = uniform(1mps, 5mps)
*.mAdhocNode[*].mobility.initFromDisplayString = false
*.mAdhocNode[*].mobility.initialZ = 0m
*.mAdhocNode[*].mobility.constraintAreaMinZ = 0m
*.mAdhocNode[*].mobility.constraintAreaMaxZ = 0m

# Bounding box constraint
**.constraintAreaMinX = 0m
**.constraintAreaMinY = 0m
**.constraintAreaMinZ = 0m
**.constraintAreaMaxX = 2000m
**.constraintAreaMaxY = 2000m
**.constraintAreaMaxZ = 300m

# ---------------- Network Layer --------------------#
**.ipv4.arp.typename = "GlobalArp"
# ---------------- Setting up routes and IP ------------------ #
*.configurator.config = xmldoc("fanet_routes.xml")
*.configurator.addStaticRoutes = false
#*.configurator.dumpConfig = "routes_dump.xml"
#*.configurator.dumpRoutes = true
*.mGatewayNode.routingApp.typename = "Aodv"
*.mAdhocNode[*].routingApp.typename = "Aodv"
#**.routingApp.typename = "Aodv"
# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
**.wlan[*].bitrate = ${BR}Mbps
**.wlan[*].radio.transmitter.modulation = ${MCS} #"QAM-64", "QAM-16", "QPSK", "BPSK"

**.wlan[0].radio.transmitter.power = 100mW  # 20 dBm
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm # -107dBm, -86dBm
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 2.75
**.pathLoss.sigma_a = 11.1852
**.pathLoss.sigma_b = 0.06
**.pathLoss.K_min = 1.4922 # (In dB) For suburban in 2.4GHz
**.pathLoss.K_max = 12.2272  # (In dB) For suburban in 2.4GHz
**.propagation.typename = "ConstantSpeedPropagation"

# Set fragmentation threshold to allow no-fragmentation of video packets
**.mac.dcf.originatorMacDataService.fragmentationPolicy.fragmentationThreshold = 1574B

# -----------  Application ---------- #
# GCS
*.GCS.numApps = 3 # 2
*.GCS.app[0].typename = "UdpGCSCsvApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] gatewayNode" # Just to fill it up, not actually used in this mode
*.GCS.app[0].numMemberUAVs = ${N}
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].seed = ${SEED} # For shuffling PCAP data
*.GCS.app[0].timeToLive = 255
*.GCS.app[1].typename = "UdpSinkRecordCsv"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = false
*.GCS.app[2].typename = "UdpSinkRecordCsv"
*.GCS.app[2].localPort = 5002
*.GCS.app[2].receiveBroadcast = false

# Gateway
*.gatewayNode.numApps = 3 # 2
*.gatewayNode.app[0].typename = "UdpSinkRecordCsv"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].receiveBroadcast = false
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true
*.gatewayNode.app[2].typename = "UdpBasicAppRecordCsv"
*.gatewayNode.app[2].localPort = 5002
*.gatewayNode.app[2].destPort = 5002
*.gatewayNode.app[2].messageLength = ${VPS}bytes
*.gatewayNode.app[2].sendInterval = ${VPS}ms * 8 * 0.001 / ${VBR}
*.gatewayNode.app[2].packetName = "GatewayVideo" # Important to name it this
*.gatewayNode.app[2].destAddresses = "GCS"
*.gatewayNode.app[2].timeToLive = 255
*.gatewayNode.app[2].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[2].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[2].numPacketRecord = ${NPR}
*.gatewayNode.app[2].dontFragment = true

# UAVs
*.adhocNode[*].numApps = 2
*.adhocNode[*].app[0].typename = "UdpSinkRecordCsv"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].receiveBroadcast = false
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} # For shuffling PCAP data

# MANET Gateway
*.mGatewayNode.numApps = 1
*.mGatewayNode.app[0].typename = "UdpSink"
*.mGatewayNode.app[0].localPort = 5000

# MANET Node
*.mAdhocNode[*].numApps = 1
*.mAdhocNode[*].app[0].typename = "UdpBasicApp"
*.mAdhocNode[*].app[0].localPort = 5000
*.mAdhocNode[*].app[0].destPort = 5000
*.mAdhocNode[*].app[0].messageLength = 512bytes
*.mAdhocNode[*].app[0].sendInterval = 200ms
*.mAdhocNode[*].app[0].packetName = "MANETPacket"
*.mAdhocNode[*].app[0].destAddresses = "mGatewayNode"
*.mAdhocNode[*].app[0].timeToLive = 255
*.mAdhocNode[*].app[0].startTime = uniform(0ms, 1ms)
*.mAdhocNode[*].app[0].numPacketRecord = 0
*.mAdhocNode[*].app[0].dontFragment = true

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[2].csvFileName = "Run-" + string(${SEED}) + "_GCS-Video-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV}
*.gatewayNode.app[0].csvFileName = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"
*.gatewayNode.app[2].csvFileName = "Run-" + string(${SEED}) + "_GW-Video-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV}
*.adhocNode[*].app[0].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

# ----------- Setting up Visualization ---------- #
#*.visualizer.physicalLinkVisualizer[*].displayLinks = true
#*.visualizer.physicalLinkVisualizer[*].packetFilter = "UAVData_0"
#**.wlan[0].radio.displayCommunicationRange = true
#*.visualizer.dataLinkVisualizer.displayLinks = true
#*.visualizer.dataLinkVisualizer.packetFilter = "UAVData_0"
#*.visualizer.networkRouteVisualizer[*].displayRoutes = true

