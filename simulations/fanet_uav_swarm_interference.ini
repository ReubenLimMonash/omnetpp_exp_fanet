# Date: 30/08/2023
# Modified FANET_Dataset_with_Video.ini to use pcap CSV files as a way of passing in packet size and sending interval from pcap files
[General]

[Config Fixed_Prob]
description = To generate FANET dataset with traffic from PCAP CSV
network = fanet_adhoc_hosts_pcap_wt_interference
#record-eventlog = true

# --------------------- TRAINING DATASET ----------------------------------
*.uavSpeed = ${USP=12} # The UAV speed 
*.numPacketsRecord = ${NPR=10000} # Number of packets to record for uplink and downlink
*.numHosts = ${N=7}
*.hdistRange = ${HDR=1200} # The range of horizontal distance to travel, in m
*.gcsX = ${GX=500} # X coord of GCS, in m
*.gcsY = ${GY=500} # Y coord of GCS, in m
*.swarmHeight = ${Z=270}
*.uavRadius = ${R=5}
*.modulation = ${MCS="QPSK"} #"QAM-64", "QAM-16", "QPSK", "BPSK"
*.MCSBitrate = ${BR=13 ! MCS} # 65, 58.5, 52, 39, 26, 19.5, 13, 6.5
.dlPcapCsvFilePath = ${DLPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_dl.csv"} 
.ulPcapCsvFilePath = ${ULPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_ul.csv"} 
.vidPcapCsvFilePath = ${VIDPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_vid.csv"} 
*.uavSendingInterval = ${EUSI=100} # Just set this to the closest Estimated UAV Sending Interval
*.gcsSendingInterval = ${EGSI=20} # Just set this to the closest Estimated GCS Sending Interval
*.videoBitRate = ${VBR=2} # In Mbps. For interference video
*.videoPacketSize = ${VPS=1450} # In bytes (with header of 64 bytes). For interference video
  # ++++++++++++ Interference specific ++++++++++++
*.numUAVInterferers = ${NUI=8} # NOTE: Remember to set *.GCSInterferer[*].app[0].destAddresses for each case
*.numGCSInterferers = ${NGI=1} # Number of interference GCSs
*.gcsInterfererOffsetX = ${GXO=0, 500, 1000} # Horizontal distance between main GCS and other GCS
*.uavGCSInterfererDist = ${UGID=100, 500, 1000} # Distance between other GCS and other UAV swarm
*.interferingUAVSendingInterval = ${IUSI=10} # Sending Interval of Interfering UAV (ms)
*.interferingGCSSendingInterval = ${IGSI=10} # Sending Interval of Interfering GCS (ms)
*.interferenceModulation = ${IMCS="QPSK"} #"QAM-64", "QAM-16", "QPSK", "BPSK"
*.interferenceMCSBitrate = ${IBR=13} # 65, 58.5, 52, 39, 26, 19.5, 13, 6.5
  # ++++++++++++++++++++++++++++++++++++++++++++++++
.csvFilePath = ${CSV="/media/research-student/One Touch/FANET Datasets/DJISpark_UAV_Swarm_Interference/data" + \
               "UAVSpeed-" + string(${USP}) + "_BitRate-" + string(${BR}) + "_Height-" + string(${Z}) + "_InterferenceDistance-" + string(${GXO}) + \
               "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string(${EUSI}) + "_UAVGCSInterfererDist-" + string(${UGID}) + \
               "_InterferenceBitRate-" + string(${IBR})}
#.pcapFilePath = ${PCAP="/home/research-student/omnetpp_sim_results/PCAP_Test/GW.pcap"} 

# -------------- For micro-sim ---------------------
sim-time-limit = ${HDR}s / ${USP} # For measured throughput dataset, determine sim time based on UAV speed and distance to travel
seed-set = ${SEED=0..9} 
# To avoid file name too long issue
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"  # use just the run number in the file name
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"  # use just the run number in the file name
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog" # use just the run number in the file name
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna" # use just the run number in the file name

# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "LinearMobility"
*.gatewayNode.mobility.initialY = ${GY}m
*.gatewayNode.mobility.initialX = ${GX}m
*.gatewayNode.mobility.initialZ = ${Z}m
*.gatewayNode.mobility.constraintAreaMinX = ${GX}m
*.gatewayNode.mobility.constraintAreaMaxX = ${HDR}m + ${GX}m
*.gatewayNode.mobility.speed = ${USP}mps
*.gatewayNode.mobility.initialMovementHeading = 0deg
*.gatewayNode.mobility.initFromDisplayString = false

# UAV member(s) mobility
*.adhocNode[*].mobility.typename = "AttachedMobility"
*.adhocNode[*].mobility.mobilityModule = "^.^.gatewayNode.mobility"
*.adhocNode[*].mobility.offsetX = ${R}m * cos(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetY = ${R}m * sin(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetZ = 0m
*.adhocNode[*].mobility.initFromDisplayString = false

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = ${GXGCS=500}m
**.GCS.mobility.initialY = ${GY}m
**.GCS.mobility.initialZ = 0m
**.GCS.mobility.initFromDisplayString = false

# GCS Interferer mobility
**.GCSInterferer[*].mobility.typename = "StationaryMobility"
**.GCSInterferer[*].mobility.initialX = ${GXGCS}m + ${GXO}m
**.GCSInterferer[*].mobility.initialY = ${GY}m + 20m
**.GCSInterferer[*].mobility.initialZ = 0m
**.GCSInterferer[*].mobility.initFromDisplayString = false

# UAV Interferer mobility 
# Stationary mobility 
**.uavInterferer[0].mobility.typename = "StationaryMobility"
**.uavInterferer[0].mobility.initialX = ${UX = ${GXGCS}m + ${GXO}m + ${UGID}m}
**.uavInterferer[0].mobility.initialY = ${GY}m + 20m 
**.uavInterferer[0].mobility.initialZ = ${Z}m
**.uavInterferer[0].mobility.initFromDisplayString = false
**.uavInterferer[*].mobility.typename = "StationaryMobility"
**.uavInterferer[*].mobility.initialX = ${UX} + ${R}m * cos(parentIndex() * (6.283185 / (${NUI}-1)))
**.uavInterferer[*].mobility.initialY = ${GY}m + 20m + ${R}m * sin(parentIndex() * (6.283185 / (${NUI}-1)))
**.uavInterferer[*].mobility.initialZ = ${Z}m
**.uavInterferer[*].mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = -100m
**.constraintAreaMinY = -100m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 2600m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 500m

#**.initFromDisplayString = false

# ---------------- Network Layer --------------------#
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.GCS.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
*.GCSInterferer[*].ipv4.arp.typename = "GlobalArp"
*.uavInterferer[*].ipv4.arp.typename = "GlobalArp"
# ---------------- Setting up routes and IP ------------------ #
*.configurator.config = xmldoc("fanet_multicast_config_interference.xml")
*.configurator.addStaticRoutes = false
*.configurator.dumpConfig = "routes_dump.xml"
*.configurator.dumpRoutes = true

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
*.GCS.wlan[0].bitrate = ${BR}Mbps
*.GCS.wlan[0].radio.transmitter.modulation = ${MCS}
*.gatewayNode.wlan[0].bitrate = ${BR}Mbps
*.gatewayNode.wlan[0].radio.transmitter.modulation = ${MCS}
*.adhocNode[*].wlan[0].bitrate = ${BR}Mbps
*.adhocNode[*].wlan[0].radio.transmitter.modulation = ${MCS}
*.GCSInterferer[*].wlan[0].bitrate = ${IBR}Mbps
*.GCSInterferer[*].wlan[0].radio.transmitter.modulation = ${IMCS}
*.uavInterferer[*].wlan[0].bitrate = ${IBR}Mbps
*.uavInterferer[*].wlan[0].radio.transmitter.modulation = ${IMCS}

# Channel modelling 
**.wlan[0].radio.transmitter.power = 100mW 
#*.GCS.wlan[0].radio.transmitter.power = 100mW # 20 dBm
#*.gatewayNode.wlan[0].radio.transmitter.power = 100mW # 20 dBm
#*.adhocNode[*].wlan[0].radio.transmitter.power = 100mW  # 20 dBm
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm # -107dBm, -86dBm
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 2.75
**.pathLoss.sigma_a = 11.1852
**.pathLoss.sigma_b = 0.06
**.pathLoss.K_min = 1.4922 # (In dB) For suburban in 2.4GHz
**.pathLoss.K_max = 12.2272  # (In dB) For suburban in 2.4GHz
**.propagation.typename = "ConstantSpeedPropagation"

# Set fragmentation threshold to allow no-fragmentation of video packets
**.mac.dcf.originatorMacDataService.fragmentationPolicy.fragmentationThreshold = 1574B

# Allow multicast forwarding
**.multicastForwarding = true

# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.numApps = 3 # 2
*.GCS.app[0].typename = "UdpGCSCsvApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] gatewayNode" # Just to fill it up, not actually used in this mode
*.GCS.app[0].numMemberUAVs = ${N}
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].seed = ${SEED} # For shuffling PCAP data
*.GCS.app[0].timeToLive = 255
*.GCS.app[1].typename = "UdpSinkRecordCsv"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = false
*.GCS.app[2].typename = "UdpSinkRecordCsv"
*.GCS.app[2].localPort = 5002
*.GCS.app[2].receiveBroadcast = false

# Gateway
*.gatewayNode.numApps = 3 # 2
*.gatewayNode.app[0].typename = "UdpSinkRecordCsv"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].receiveBroadcast = false
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${SEED} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true
*.gatewayNode.app[2].typename = "UdpBasicAppRecordCsv"
*.gatewayNode.app[2].localPort = 5002
*.gatewayNode.app[2].destPort = 5002
*.gatewayNode.app[2].messageLength = ${VPS}bytes
*.gatewayNode.app[2].sendInterval = ${VPS}ms * 8 * 0.001 / ${VBR}
*.gatewayNode.app[2].packetName = "GatewayVideo" # Important to name it this
*.gatewayNode.app[2].destAddresses = "GCS"
*.gatewayNode.app[2].timeToLive = 255
*.gatewayNode.app[2].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[2].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[2].numPacketRecord = ${NPR}
*.gatewayNode.app[2].dontFragment = true

# UAVs
*.adhocNode[*].numApps = 2
*.adhocNode[*].app[0].typename = "UdpSinkRecordCsv"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].receiveBroadcast = false
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${SEED} # For shuffling PCAP data

# GCS Interferer
*.GCSInterferer[*].ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCSInterferer[*].numApps = 3 # 2
*.GCSInterferer[*].app[0].typename = "UdpGCSCsvApp"
*.GCSInterferer[*].app[0].localPort = 5000
*.GCSInterferer[*].app[0].destPort = 5000
*.GCSInterferer[*].app[0].packetName = "GCSInterference"
*.GCSInterferer[*].app[0].destAddresses = "uavInterferer[0] uavInterferer[1] uavInterferer[2] uavInterferer[3] uavInterferer[4] uavInterferer[5] uavInterferer[6] uavInterferer[7]"
*.GCSInterferer[*].app[0].numMemberUAVs = 0
*.GCSInterferer[*].app[0].sendInterval = ${IGSI}ms
*.GCSInterferer[*].app[0].startTime = uniform(0ms, 1ms)
*.GCSInterferer[*].app[0].stopTime = ${HDR}s / ${USP} 
*.GCSInterferer[*].app[0].numPacketRecord = 0
*.GCSInterferer[*].app[0].pcapCsvFileName = ${DLPCSV}
*.GCSInterferer[*].app[0].seed = ${SEED} # For shuffling PCAP data
*.GCSInterferer[*].app[0].timeToLive = 255
*.GCSInterferer[*].app[1].typename = "UdpSink"
*.GCSInterferer[*].app[1].localPort = 5001
*.GCSInterferer[*].app[1].receiveBroadcast = true
*.GCSInterferer[*].app[2].typename = "UdpSink"
*.GCSInterferer[*].app[2].localPort = 5002
*.GCSInterferer[*].app[2].receiveBroadcast = true

# UAV Interferer
## Only interfering UAV [0] send CNC + Video to one single GCS, the others send CNC only to same single GCS
# Don't forget to use fanet_routes_interference_v2.xml if want to make uavInterferer[0] the gateway
*.uavInterferer[0].numApps = 3 # 2
*.uavInterferer[*].numApps = 2 # 2
*.uavInterferer[*].app[0].typename = "UdpSink"
*.uavInterferer[*].app[0].localPort = 5000
*.uavInterferer[*].app[0].receiveBroadcast = true
*.uavInterferer[*].app[1].typename = "UdpBasicCsvApp"
*.uavInterferer[*].app[1].localPort = 5001
*.uavInterferer[*].app[1].destPort = 5001
*.uavInterferer[*].app[1].packetName = "UAVInterference_" + string(parentIndex())
*.uavInterferer[*].app[1].destAddresses = "GCSInterferer[0]"
*.uavInterferer[*].app[1].timeToLive = 255
*.uavInterferer[*].app[1].sendInterval = ${IUSI}ms
*.uavInterferer[*].app[1].startTime = uniform(0ms, 1ms)
*.uavInterferer[*].app[1].stopTime = ${HDR}s / ${USP} 
*.uavInterferer[*].app[1].numPacketRecord = 0 # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.uavInterferer[*].app[1].pcapCsvFileName = ${ULPCSV}
*.uavInterferer[*].app[1].seed = ${SEED} + parentIndex() # For shuffling PCAP data
*.uavInterferer[*].app[1].dontFragment = true
*.uavInterferer[0].app[2].typename = "UdpBasicApp" # Video App
*.uavInterferer[0].app[2].localPort = 5002
*.uavInterferer[0].app[2].destPort = 5002
*.uavInterferer[0].app[2].messageLength = ${VPS}bytes
*.uavInterferer[0].app[2].sendInterval = ${VPS}ms * 8 * 0.001 / ${VBR}
*.uavInterferer[0].app[2].packetName = "UAVInterfererVideo" # Important to name it this
*.uavInterferer[0].app[2].destAddresses = "GCSInterferer[0]"
*.uavInterferer[0].app[2].timeToLive = 255
*.uavInterferer[0].app[2].startTime = uniform(0ms, 1ms)
*.uavInterferer[0].app[2].stopTime = ${HDR}s / ${USP} 
*.uavInterferer[0].app[2].numPacketRecord = 0
*.uavInterferer[0].app[2].dontFragment = true

# Storing to CSV File
# Application level monitoring
*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV}
*.GCS.app[0].csvFileNameTx = "Run-" + string(${SEED}) + "_GCS-Tx.csv"
*.GCS.app[0].csvFileNameRx = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${SEED}) + "_GCS-Rx.csv"
*.GCS.app[2].csvFileName = "Run-" + string(${SEED}) + "_GCS-Video-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV}
*.gatewayNode.app[0].csvFileName = "Run-" + string(${SEED}) + "_GW-Rx.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${SEED}) + "_GW-Tx.csv"
*.gatewayNode.app[2].csvFileName = "Run-" + string(${SEED}) + "_GW-Video-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV}
*.adhocNode[*].app[0].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${SEED}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

*.GCSInterferer[*].wlan[0].radio.receiver.csvFilePath = ${CSV}
*.GCSInterferer[*].wlan[0].radio.receiver.csvFileName = "_"
*.GCSInterferer[*].app[*].csvFilePath = ${CSV}
*.GCSInterferer[*].app[*].csvFileNameTx = "_"
*.GCSInterferer[*].app[*].csvFileNameRx = "_"
*.GCSInterferer[*].app[*].csvFileName = "_"

*.uavInterferer[*].wlan[0].radio.receiver.csvFilePath = ${CSV}
*.uavInterferer[*].wlan[0].radio.receiver.csvFileName = "_"
*.uavInterferer[*].app[*].csvFilePath = ${CSV}
*.uavInterferer[*].app[*].csvFileName = "_"

# ----------- Setting up Visualization ---------- #
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.mobilityVisualizer[*].displayVelocities = false
*.visualizer.mobilityVisualizer[*].displayMovementTrails = false
*.visualizer.interfaceTableVisualizer[*].displayInterfaceTables = true
*.visualizer.physicalLinkVisualizer[*].displayLinks = true
*.visualizer.physicalLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"

#*.GCS.wlan[0].radio.displayCommunicationRange = true
#*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
#*.adhocNode*.wlan[0].radio.displayInterferenceRange = true
**.wlan[0].radio.displayCommunicationRange = true
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
#*.visualizer.*.routingTableVisualizer[*].displayRoutingTables = true
#*.visualizer.*.routingTableVisualizer[*].destinationFilter = "*"

